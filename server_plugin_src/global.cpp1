//---------------------------------------------------------------------------


#pragma hdrstop

#include <vcl.h>
#include "global.h"
#include "main_form.h"
#include "webchat.h"

mysql *mysql_connection = NULL;

mysql::mysql()
{
	Con = mysql_init(NULL);
	//mysql_options(Con, MYSQL_OPT_CONNECT_TIMEOUT, &timeout);
}

mysql::~mysql()
{
}

String mysql::connect(String host, String user, String pass, String db_name)
{

	mysql_options(Con, MYSQL_SET_CHARSET_NAME, "utf8");
	String result = NULL;
	Con = mysql_real_connect(Con, "localhost", "root", "", "drupal", 0, NULL, 0);
	ShowMessage(mysql_get_client_version());


	if(!Con)
		result = Format("%s (%s)", ARRAYOFCONST((String(mysql_error(Con)), String(mysql_errno(Con)))));

	//mysql_set_character_set(Con, "utf8");
	MY_CHARSET_INFO cs;
	mysql_get_character_set_info(Con, &cs);
	ShowMessage("character set name: " + String(cs.name));
	ShowMessage("collation name: " + String(cs.csname));

	return result;
}

String mysql::query(String query)
{
	String result = NULL;
	//char *names = "SET NAMES utf8";
	//mysql_real_query(Con, names, strlen(names));
	AnsiString query1 =
	 "INSERT INTO `cf_messages` (`body`, `nick`, `male`, `channel`, `type`) VALUES (`туц`, `туц`, 0, `global`, 0)";
	//query = UTF8Encode(query);
	char *c;
	//strcpy(c, );
	char *c1 = new char[query1.Length() * 2 + 1];

	mysql_real_escape_string(Con, c1, query1.c_str(), query1.Length());
	ShowMessage(c1);
	main_form->Edit1->Text = String(c1);
	int err = mysql_real_query(Con, c1, strlen(c1));
	if (err)
		result = Format("%s (%s)", ARRAYOFCONST((String(mysql_error(Con)), String(mysql_errno(Con)))));
	return result;
}

const TColor color[3] = {clBlack, clOlive, clRed};

String table_users_name = "cf_users",
	   table_users_online = "cf_users_online",
	   table_messages_name   = "cf_messages",
	   table_mess_to_send_name = "cf_messages_to_send",
	   table_settings_name = "cf_settings",
	   table_web_users_name = "cf_web_users",
	   tables_prefix = "",
       plugin_data_path = "",
	   config_ini_path,
	   log_file_path,
	   messages[3] = {"", "<<Предупреждение>> ", "!!!ОШИБКА!!! "},
	   bot_name,
	   bot_ip,
	   bot_pass,
	   active_channel,
	   conn_address;

TStringList * white_ips = NULL;

const UnicodeString
  plu_name     = "CommFort WebChat",
  plu_ver      = "1.00 alpha";

bool bot_is_female, keep_conn, visual_log,
	 file_log, is_plugin_active = false,
	 auto_bd_clear, auto_log_clear, auto_start,
	 is_initialized = false, isfirstrun;
int remaining_time, elapsed_time;

// ---------------------------------------------------------------------------
int get_stream_dword (BYTE **p, DWORD *len)
{
	*len = *((DWORD*)*p);
	*p+=4;
	return 1;
}
// ---------------------------------------------------------------------------
int get_stream_string (BYTE **p, UnicodeString *var)
{
	DWORD n;
	get_stream_dword (p, &n);
	if (var)
	{
		(*var).SetLength(n);
		memcpy((*var).c_str(), *p, n * 2);
	}
	*p += n * 2;
	return 1;
}
// ---------------------------------------------------------------------------
void set_stream_str (BYTE *p, DWORD * offset, UnicodeString var, DWORD len)
{
	memcpy(p + *offset, &len, 4);
	*offset += 4;
	if (var != NULL) {
		var.SetLength(len);
		memcpy(p + *offset, var.c_str(), len * 2);
		*offset += len * 2;
	}
}
// ---------------------------------------------------------------------------
String get_ip(HWND hWindow)
{
	String ip;
	DWORD long_ip;
	SendMessage(hWindow, IPM_GETADDRESS, 0, (LPARAM)(LPDWORD)&long_ip);

	ip = (String)FIRST_IPADDRESS((LPARAM)long_ip) + "." +
		(String)SECOND_IPADDRESS((LPARAM)long_ip) + "." +
		(String)THIRD_IPADDRESS((LPARAM)long_ip) + "." +
		(String)FOURTH_IPADDRESS((LPARAM)long_ip);
	return ip;
}
// ---------------------------------------------------------------------------
String encode(String line)
{
	TIdEncoderMIME *encode = new TIdEncoderMIME(Application);
	line = encode->EncodeString(line, TEncoding::UTF8);
	delete encode;

	return line;
}
// ---------------------------------------------------------------------------
String decode(String line)
{
	TIdDecoderMIME *decode = new TIdDecoderMIME(Application);
	line = decode->DecodeString(line);
	delete decode;

	return line;
}

#pragma package(smart_init)
