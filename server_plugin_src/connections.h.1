//---------------------------------------------------------------------------

#ifndef connectionsH
#define connectionsH
#include <list>
#include "online_users.h"
#include <winsock2.h>
//---------------------------------------------------------------------------

// Логическое соединение (пользователь).
struct LogicalConnection {
	LogicalConnection(String _conn_id, String _app_name, int _time, String _ip, SOCKET _sock) : conn_id(_conn_id),
		app_name(_app_name), auth_status(7), time(_time), last_act_t(_time), ip(_ip), sock(_sock), user(GetEmptyOnlineUser()) { };
	SOCKET sock;
	String conn_id, app_name, ip;
	OnlineUsersList::iterator user;
	int auth_status;
	int time, last_act_t;
};

typedef list<LogicalConnection> LogicalConnections;
typedef vector<LogicalConnections::iterator> LogicalConnectionsRef;
extern LogicalConnections logical_connections;

extern LogicalConnections::iterator SearchConnection(String conn_id);
extern LogicalConnections::iterator SearchBySocket(SOCKET &sock);
extern LogicalConnections::iterator SearchByIP(String ip);
extern LogicalConnections::iterator FindConnectionByUser(String user);
extern LogicalConnectionsRef GetChannelConnections(String channel);
LogicalConnectionsRef GetConnectionsRef();
LogicalConnections GetConnections();
extern String AddConnection(String app_name, String ip, SOCKET sock);
extern void SetConnectionUser(LogicalConnections::iterator conn, OnlineUsersList::iterator user);
extern void UnsetConnectionUser(String user);
extern void UnsetConnectionUser(LogicalConnections::iterator conn);
extern void ConnectionUserDisconnect(LogicalConnections::iterator conn);
extern void FullUserConnectionDelete(LogicalConnections::iterator conn);
extern void DeleteConnection(String conn_id);
extern void DeleteConnection(LogicalConnections::iterator conn);
extern void DeleteExpiredConnections();
extern void UpdateConnectionLastAction(LogicalConnections::iterator conn);
extern void SetAuthorizationStatus(String conn_id, int authorization_status);
void SetAuthorizationStatus(LogicalConnections::iterator connection, int authorization_status);
extern int GetAuthorizationStatus(LogicalConnections::iterator connection);
extern int GetAuthorizationStatus(String conn_id);
extern bool IsHTTPConnection(LogicalConnections::iterator connection);
extern bool ConnectionExists(String conn_id);
extern bool ConnectionExists(LogicalConnections::iterator connection);
extern LogicalConnections::iterator CheckConnectionID(String conn_id);
extern bool GetUserOnlineStatus(LogicalConnections::iterator conn);
extern OnlineUsersList::iterator GetConnectionUser(LogicalConnections::iterator connection);
extern int GetConnectionUserChannelsNumber(LogicalConnections::iterator conn);
extern String GetConnectionID(LogicalConnections::iterator connection);
extern String GetConnectionUserName(LogicalConnections::iterator conn);
String GetConnectionIP(LogicalConnections::iterator connection);

void clear();
//---------------------------------------------------------------------------

#endif
